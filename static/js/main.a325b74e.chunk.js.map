{"version":3,"sources":["App.module.css","components/Image/Image.module.css","components/Image/index.js","components/Image/Image.js","components/CustomHook/useFetch.js","components/InfiniteList/InfiniteList.js","components/InfiniteList/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Image","useState","imageInfo","setImageInfo","imageId","setImageId","hasError","setHasError","useEffect","fetch","Math","floor","random","then","res","json","data","author","id","catch","useFetch","className","classes","image","style","backgroundImage","InfiniteList","Array","from","keys","n","listItems","setListItems","isFetching","setIsFetching","window","addEventListener","debounce","handleScroll","removeEventListener","prevState","length","func","delay","inDebounce","clearTimeout","setTimeout","apply","arguments","innerHeight","document","documentElement","scrollTop","offsetHeight","map","listItem","key","App","app","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,IAAM,mB,gBCAxBD,EAAOC,QAAU,CAAC,MAAQ,uB,+MCAXC,ECGM,WAAO,IAAD,ECFH,WAAO,IAAD,EACMC,mBAAS,IADf,mBACrBC,EADqB,KACVC,EADU,OAEEF,mBAAS,IAFX,mBAErBG,EAFqB,KAEZC,EAFY,OAGIJ,oBAAS,GAHb,mBAGrBK,EAHqB,KAGXC,EAHW,KAmB5B,OAdAC,qBAAU,WACRC,MAAM,4BAAD,OACyBC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,EAD3D,UAGFC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLb,EAAaa,EAAKC,QAClBZ,EAAWW,EAAKE,OAEjBC,OAAM,WACLZ,GAAY,QAEf,IAEI,CAACL,EAAWE,EAASE,GDhBWc,GADd,mBAClBlB,EADkB,KACPE,EADO,KACEE,EADF,KAGzB,OACE,qCACIA,GACA,yBACEe,UAAWC,IAAQC,MACnBC,MAAO,CACLC,gBAAgB,gCAAD,OAAkCrB,EAAlC,WAGhBE,GAAY,6BAGfA,GAAY,uCAAaJ,KEfpBwB,EAAe,WAAO,IAAD,EACEzB,mBAChC0B,MAAMC,KAAKD,MAAM,GAAGE,QAAQ,SAACC,GAAD,OAAOA,EAAI,MAFT,mBACzBC,EADyB,KACdC,EADc,OAKI/B,oBAAS,GALb,mBAKzBgC,EALyB,KAKbC,EALa,KAOhC1B,qBAAU,WAER,OADA2B,OAAOC,iBAAiB,SAAUC,EAASC,EAAc,MAClD,kBACLH,OAAOI,oBAAoB,SAAUF,EAASC,EAAc,SAC7D,IAEH9B,qBAAU,WACHyB,IAwBLD,GAAa,SAACQ,GAAD,4BACRA,GADQ,YAERb,MAAMC,KAAKD,MAAM,GAAGE,QAAQ,SAACC,GAAD,OAAOA,EAAIU,EAAUC,OAAS,UAE/DP,GAAc,MA1Bb,CAACD,IAEJ,IAAMI,EAAW,SAACK,EAAMC,GACtB,IAAIC,EACJ,OAAO,WAAa,IAAD,mBACjBC,aAAaD,GACbA,EAAaE,YAAW,WACtBJ,EAAKK,MAAM,EAAMC,KAChBL,KAIP,SAASL,IAGLH,OAAOc,YAAcC,SAASC,gBAAgBC,UAAY,KAC1DF,SAASC,gBAAgBE,cAG3BnB,GAAc,GAUhB,OACE,oCACE,4BACGH,EAAUuB,KAAI,SAACC,GAAD,OACb,wBAAIC,IAAKD,GACP,kBAAC,EAAD,WAILtB,GAAc,gCCzDNP,ICYA+B,MATf,WACE,OACE,yBAAKpC,UAAWC,IAAQoC,KACtB,6DACA,kBAAC,EAAD,QCIcC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASgB,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdpD,OAAM,SAAAqD,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a325b74e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1Q0-B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"Image_image__1Reax\"};","import { Image } from './Image'\r\nexport default Image\r\n","import React from 'react'\r\nimport classes from './Image.module.css'\r\nimport { useFetch } from '../CustomHook/useFetch'\r\n\r\nexport const Image = () => {\r\n  const [imageInfo, imageId, hasError] = useFetch()\r\n\r\n  return (\r\n    <>\r\n      {!hasError && (\r\n        <div\r\n          className={classes.image}\r\n          style={{\r\n            backgroundImage: `url(https://picsum.photos/id/${imageId}/300)`,\r\n          }}\r\n        >\r\n          {hasError && 'Oops! No image, sorry :('}\r\n        </div>\r\n      )}\r\n      {!hasError && <h3>Author: {imageInfo}</h3>}\r\n      {/* {hasError ? <h3>No author either :'(</h3> : <h3>Author: {imageInfo}</h3>} */}\r\n    </>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react'\r\n\r\nexport const useFetch = () => {\r\n  const [imageInfo, setImageInfo] = useState([])\r\n  const [imageId, setImageId] = useState([])\r\n  const [hasError, setHasError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://picsum.photos/id/${Math.floor(Math.random() * 500) + 1}/info`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setImageInfo(data.author)\r\n        setImageId(data.id)\r\n      })\r\n      .catch(() => {\r\n        setHasError(true)\r\n      })\r\n  }, [])\r\n\r\n  return [imageInfo, imageId, hasError]\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport classes from './InfiniteList.module.css'\r\nimport Image from '../Image'\r\n\r\nexport const InfiniteList = () => {\r\n  const [listItems, setListItems] = useState(\r\n    Array.from(Array(6).keys(), (n) => n + 1)\r\n  )\r\n\r\n  const [isFetching, setIsFetching] = useState(false)\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', debounce(handleScroll, 500))\r\n    return () =>\r\n      window.removeEventListener('scroll', debounce(handleScroll, 500))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (!isFetching) return\r\n    fetchMoreListItems()\r\n  }, [isFetching])\r\n\r\n  const debounce = (func, delay) => {\r\n    let inDebounce\r\n    return function () {\r\n      clearTimeout(inDebounce)\r\n      inDebounce = setTimeout(() => {\r\n        func.apply(this, arguments)\r\n      }, delay)\r\n    }\r\n  }\r\n\r\n  function handleScroll() {\r\n    if (\r\n      // window.innerHeight + document.documentElement.scrollTop !==\r\n      window.innerHeight + document.documentElement.scrollTop + 300 <=\r\n      document.documentElement.offsetHeight\r\n    )\r\n      return\r\n    setIsFetching(true)\r\n  }\r\n  function fetchMoreListItems() {\r\n    setListItems((prevState) => [\r\n      ...prevState,\r\n      ...Array.from(Array(6).keys(), (n) => n + prevState.length + 1),\r\n    ])\r\n    setIsFetching(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ul>\r\n        {listItems.map((listItem) => (\r\n          <li key={listItem}>\r\n            <Image />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {isFetching && 'Fetching more list items...'}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default InfiniteList\r\n","import { InfiniteList } from './InfiniteList'\r\nexport default InfiniteList\r\n","import React from 'react'\nimport classes from './App.module.css'\nimport InfiniteList from './components/InfiniteList'\n\nfunction App() {\n  return (\n    <div className={classes.app}>\n      <h1>SCROLL'EM PICSUM AD INFINITUM</h1>\n      <InfiniteList />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n// const fetcherTest = require('./back/fetcher')\n// console.log(fetcherTest)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}